---
- hosts: all

  tasks:
  - name: Setup Block
    block: 
      - name: Install necessary packages
        apt:
          name: "{{ packages }}"
          state: present
          update_cache: yes
        vars:
          packages:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common 
          - gnupg2
          - net-tools
          - python3-pip

      - name: Install bottle python package
        ansible.builtin.pip:
          name: "{{ packages }}"
        vars:
          packages:
          - pyyaml
          - jsonpatch
          - kubernetes

      - name: Remove swapfile from /etc/fstab
        mount:
          name: "{{ item }}"
          fstype: swap
          state: absent
        with_items:
          - swap
          - none

      - name: Disable swap
        command: swapoff -a
        when: ansible_swaptotal_mb > 0

      - name: Add an apt signing key for Kubernetes
        apt_key:
          url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key 
          state: present

      - name: Adding apt repository for Kubernetes
        apt_repository:
          repo: deb https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /
          state: present
          filename: kubernetes.list

      - name: Install Kubernetes binaries
        apt: 
          name: "{{ packages }}"
          state: present
          update_cache: yes
        vars:
          packages:
            - kubelet={{ kubeversion }}
            - kubeadm={{ kubeversion }}
            - kubectl={{ kubeversion }}

      - name: Install Containerd 
        block: 
          - name: Install containerd
            apt: 
              name: "{{ packages }}"
              state: present
              update_cache: yes
            vars:
              packages:
              - containerd

          - name: Configure containerd
            blockinfile:
              create: true
              path: /etc/modules-load.d/containerd.conf
              block: |
                overlay
                br_netfilter
        when: cri == 'containerd'

      - name: Enable kernel modules
        shell: |
          modprobe overlay
          modprobe br_netfilter

      - name: Configure IP forwarding and iptables
        blockinfile:
          create: true
          path: /etc/sysctl.conf
          block: |
            net.bridge.bridge-nf-call-iptables = 1
            net.ipv4.ip_forward = 1

      - name: Persist changes
        command: sysctl -p

      - name: Get IP eth1 addr
        shell: ifconfig eth1 | grep 'inet' | cut -d{{':'}} -f2 | awk '{ print $2 }'
        register: output

      - name: Print return information from the previous task
        ansible.builtin.debug:
          var: output
          verbosity: 2

      - name: Configure kubelet
        lineinfile:
          path: /lib/systemd/system/kubelet.service.d/10-kubeadm.conf
          line: Environment="KUBELET_EXTRA_ARGS=--node-ip={{ output.stdout }}"

      - name: Initialize the Kubernetes cluster using kubeadm
        command: kubeadm init --apiserver-advertise-address="192.168.56.10" --apiserver-cert-extra-sans="192.168.56.10" --pod-network-cidr=10.244.0.0/16
        when: cni == 'flannel' 

      - name: Initialize the Kubernetes cluster using kubeadm
        command: kubeadm init --apiserver-advertise-address="192.168.56.10" --apiserver-cert-extra-sans="192.168.56.10" --pod-network-cidr=10.244.0.0/16
        when: cni == 'cilium' 

      - name: Initialize the Kubernetes cluster using kubeadm
        command: kubeadm init --apiserver-advertise-address="192.168.56.10" --apiserver-cert-extra-sans="192.168.56.10" --pod-network-cidr=10.244.0.0/16
        when: cni == 'ciliumEXP'


      - name: Initialize the Kubernetes cluster using kubeadm
        command: kubeadm init --apiserver-advertise-address="192.168.56.10" --apiserver-cert-extra-sans="192.168.56.10" --pod-network-cidr=192.168.0.0/16
        when: cni == 'calico' 

      - name: Create kube directory
        file:
          path: /home/vagrant/.kube
          state: directory

      - name: Setup kubeconfig for vagrant user
        copy:
          src: /etc/kubernetes/admin.conf
          dest: /home/vagrant/.kube/config
          remote_src: yes
          owner: vagrant
          group: vagrant
          mode: '0644'
    become: true

  - name: Install Cilium if cni == cilium
    block:
      - name: Install Helm 
        become: yes
        snap:
          name: helm
          state: present
          classic: yes

      - name: Add Cilium Repo
        kubernetes.core.helm_repository:
          name: cilium
          repo_url: "https://helm.cilium.io/"

      - name: Deploy 
        kubernetes.core.helm:
          kubeconfig: /home/vagrant/.kube/config
          name: cilium 
          chart_ref: cilium/cilium
          release_namespace: "kube-system"
          values:
            kubeProxyReplacement: "strict"
            ipam.mode: "kubernetes"

    when: cni == 'cilium'

  - name: Install Cilium Using Binary Experimental/Unsupported
    block:

      - name: Curl current stable version
        ansible.builtin.uri:
          url: https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt
          return_content: true
        register: cilium_version

      - name: Remove trailing newline character
        set_fact:
          cleaned_content: "{{ cilium_version.content | regex_replace('\n$', '') }}"

      - name: Print cleaned content
        debug:
          var: cleaned_content

      - name: Obtain cilium 
        ansible.builtin.uri:
          url: https://github.com/cilium/cilium-cli/releases/download/{{ cleaned_content }}/cilium-linux-amd64.tar.gz
          dest: /home/vagrant/cilium.tar.gz

      - name: Unarchive a file with extra options
        ansible.builtin.unarchive:
          owner: vagrant
          group: vagrant
          src: /home/vagrant/cilium.tar.gz
          dest: /usr/local/bin
          remote_src: yes
        become: yes


      - name: Install cilium 
        ansible.builtin.shell: cilium install
        register: result
        until: result.stdout.find("been installed") != -1
        retries: 5
        delay: 30
    when: cni == 'ciliumEXP'

            #- name: set arch from CLI return(implement later)
            #if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi
            # Keeping URL below while building out the rest
            #- name: set arch from CLI return(implement later)
            #if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi
            # Keeping URL below while building out the rest
            # url: https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz

  - name: Install calico if cni == calico
    block:
      - name: Download 
        get_url: 
          url: https://raw.githubusercontent.com/projectcalico/calico/v3.27.0/manifests/tigera-operator.yaml 
          dest: /home/vagrant/tigera-operator.yaml

            #- name: Install calico CNI
            #become: false
            #command: kubectl create -f tigera-operator.yaml

      - name: Apply Tigera Operator
        kubernetes.core.k8s:
          state: present
          kubeconfig: /home/vagrant/.kube/config
          src: /home/vagrant/tigera-operator.yaml


      - name: Download Calico Custom Resrouce
        get_url:
          url: https://raw.githubusercontent.com/projectcalico/calico/v3.27.0/manifests/custom-resources.yaml
          dest: /home/vagrant/custom-resource.yaml 

      - name: Apply Calico custom resources
        kubernetes.core.k8s:
          state: present
          kubeconfig: /home/vagrant/.kube/config
          src: /home/vagrant/custom-resource.yaml

            #- name: Create Calico Custom Resource
            #become: false
            #command: kubectl create -f custom-resource.yaml 
    when: cni == 'calico' 

  - name: Install flannel if cni == flannel
    block:
      - name: Download Flannel 
        get_url:
          url: https://github.com/coreos/flannel/raw/master/Documentation/kube-flannel.yml
          dest: /home/vagrant/kube-flannel.yml

            #- name: Install Flannel CNI
            #become: false
            #command: kubectl create -f kube-flannel.yml

      - name: Apply flannel manifest to the cluster.
        kubernetes.core.k8s:
          state: present
          kubeconfig: /home/vagrant/.kube/config
          src: /home/vagrant/kube-flannel.yml

    when: cni == 'flannel' 

  - name: Create Join Command
    block:
      - name: Generate join command
        command: kubeadm token create --print-join-command
        register: join_command

      - name: Copy join command to local file
        become: false
        local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
